;;;; Copyright (c) 2012-2015 jnjcc, Yste.org. All rights reserved.
;;;;

(in-package #:cl-ml)

;;; Distances for clustering
(defun minkowski-distance (x y p)
  (let ((sum 0))
    (do-vector (i x)
      (incf sum (expt (abs (- (vref x i) (vref y i))) p)))
    (expt sum (/ 1 p))))

(defun euclidean-distance (x y)
  (let ((sum 0)
        (cur nil))
    (do-vector (i x)
      (setf cur (- (vref x i) (vref y i)))
      (incf sum (* cur cur)))
    (expt sum 1/2)))

(defun euclidean-squared (x y)
  (let ((sum 0)
        (cur nil))
    (do-vector (i x)
      (setf cur (- (vref x i) (vref y i)))
      (incf sum (* cur cur)))
    sum))

(defun manhattan-distance (x y)
  (let ((sum 0))
    (do-vector (i x)
      (incf sum (abs (- (vref x i) (vref y i)))))
    sum))

(defun chebyshev-distance (x y)
  (let ((sum nil)
        (cur nil))
    (do-vector (i x)
      (setf cur (abs (- (vref x i) (vref y i))))
      (when (or (null sum) (< sum cur))
        (setf sum cur)))
    sum))

(defun mahalanobis-distance (x y sigma)
  "X Y can be row or column vectors; `sigma': covariance matrix"
  (let ((dif (m- x y))
        (sqdiff nil))
    (ecase (svector-type dif)
      (:row (setf sqdiff (m* dif (minv sigma) (mt dif))))
      (:column (setf sqdiff (m* (mt dif) (minv sigma) dif))))
    (expt (mref sqdiff 0 0) 1/2)))

(defun correlation-coefficient (x y)
  (let ((xbar 0)
        (ybar 0)
        (xysum 0)
        (xqsum 0)
        (yqsum 0)
        ;; might be row vector
        (size (* (nrow x) (ncol x))))
    (do-vector (i x)
      (incf xbar (vref x i))
      (incf ybar (vref y i)))
    (setf xbar (/ xbar size))
    (setf ybar (/ ybar size))
    (do-vector (i x)
      (let ((xdiff (- (vref x i) xbar))
            (ydiff (- (vref y i) ybar)))
        (incf xysum (* xdiff ydiff))
        (incf xqsum (* xdiff xdiff))
        (incf yqsum (* ydiff ydiff))))
    (/ xysum (expt (* xqsum yqsum) 1/2))))

(defun cosine-distance (x y)
  (let ((xysum 0)
        (xqsum 0)
        (yqsum 0))
    (do-vector (i x)
      (let ((xi (vref x i))
            (yi (vref y i)))
        (incf xysum (* xi yi))
        (incf xqsum (* xi xi))
        (incf yqsum (* yi yi))))
    (/ xysum (expt (* xqsum yqsum) 1/2))))
